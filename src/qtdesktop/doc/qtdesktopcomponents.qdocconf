include($QT_INSTALL_DOCS/global/qt-module-defaults.qdocconf)

# Name of the project.
project = QtDesktopComponents
description = Qt Desktop Components Documentation

depends = qtqml qtquick qtwidgets qtdoc

# Directories in which to search for files to document and images.
# By default set to the root directory of the project for sources
# and headers and qdoc will therefore generate output for each file.
# Images should be placed in <rootdir>/dic/images and examples in
# <rootdir>/examples.
# Paths are relative to the  location of this file.

exampledirs += ../../../examples/

headerdirs += ../

sourcedirs += ../

sources += ../../private/qstyleitem.cpp \
           ../../private/BasicButton.qml \
           ../../private/ButtonBehavior.qml \
           ../../private/FocusFrame.qml \
           ../../private/ModalPopupBehavior.qml \
           ../../private/PageSlideTransition.qml \
           ../../private/ScrollAreaHelper.qml \
           ../../private/ScrollBar.qml \
           ../../private/SplitterBase.qml \
           ../../private/TabBar.qml \
           ../../private/Control.qml \
           ../../styles/Style.qml \
           ../../styles/ButtonStyle.qml \
           ../../styles/CheckBoxStyle.qml \
           ../../styles/ComboBoxStyle.qml \
           ../../styles/GroupBoxStyle.qml \
           ../../styles/MenuBarItemStyle.qml \
           ../../styles/MenuBarStyle.qml \
           ../../styles/MenuFrameStyle.qml \
           ../../styles/MenuItemStyle.qml \
           ../../styles/ProgressBarStyle.qml \
           ../../styles/RadioButtonStyle.qml \
           ../../styles/ScrollAreaStyle.qml \
           ../../styles/ScrollBarStyle.qml \
           ../../styles/SliderStyle.qml \
           ../../styles/SpinBoxStyle.qml \
           ../../styles/TabFrameStyle.qml \
           ../../styles/TextFieldStyle.qml \
           ../../styles/ToolBarStyle.qml \
           ../../styles/ToolButtonStyle.qml

imagedirs += images

# The following parameters are for creating a qhp file, the qhelpgenerator
# program can convert the qhp file into a qch file which can be opened in
# Qt Assistant and/or Qt Creator.

# Defines the name of the project. You cannot use operators (+, =, -) in
# the name. Properties for this project are set using a qhp.<projectname>.property
# format.
qhp.projects = qtdesktopcomponents

# Sets the name of the output qhp file.
qhp.qtdesktopcomponents.file = qtdesktopcomponents.qhp

# Namespace for the output file. This namespace is used to distinguish between
# different documentation files in Creator/Assistant.
qhp.qtdesktopcomponents.namespace = qtdesktopcomponents.100

# Title for the package, will be the main title for the package in
# Assistant/Creator.
qhp.qtdesktopcomponents.indexTitle = Qt Desktop Components

# Extra files to add to the output which are not linked to from anywhere
# using a qdoc \l command.
#qhp.qtdesktopcomponents.extraFiles = style/qtdesktopcomponents.css

# Only update the name of the project for the next variables.
qhp.qtdesktopcomponents.virtualFolder  = qtdesktopcomponents

qhp.qtdesktopcomponents.subprojects = desktopqmltypes styleqmltypes
qhp.qtdesktopcomponents.subprojects.desktopqmltypes.title = Desktop QML Types
qhp.qtdesktopcomponents.subprojects.desktopqmltypes.indexTitle = Qt Desktop QML Types
qhp.qtdesktopcomponents.subprojects.desktopqmltypes.selectors = class fake:headerfile
qhp.qtdesktopcomponents.subprojects.desktopqmltypes.sortPages = true
qhp.qtdesktopcomponents.subprojects.styleqmltypes.title = Desktop Styles QML Types
qhp.qtdesktopcomponents.subprojects.styleqmltypes.indexTitle = Qt Desktop Styles QML Types
qhp.qtdesktopcomponents.subprojects.styleqmltypes.selectors = class fake:headerfile
qhp.qtdesktopcomponents.subprojects.styleqmltypes.sortPages = true
