import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated with the command 'qmlplugindump QtQuick.Controls 1.0'.

Module {
    Component {
        name: "QPageStatus"
        prototype: "QObject"
        exports: ["PageStatus 1.0"]
        Enum {
            name: "PageStatus"
            values: {
                "Inactive": 0,
                "Deactivating": 1,
                "Activating": 2,
                "Active": 3
            }
        }
    }
    Component {
        name: "QtAction"
        prototype: "QObject"
        exports: ["Action 1.0"]
        Property { name: "text"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__icon"; type: "QVariant"; isReadonly: true }
        Property { name: "tooltip"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QtExclusiveGroup"; isPointer: true }
        Property { name: "shortcut"; type: "string" }
        Signal { name: "triggered" }
        Signal {
            name: "toggled"
            Parameter { type: "bool" }
        }
        Signal {
            name: "shortcutChanged"
            Parameter { name: "shortcut"; type: "string" }
        }
        Signal { name: "iconChanged" }
        Signal {
            name: "tooltipChanged"
            Parameter { name: "arg"; type: "string" }
        }
        Method { name: "trigger" }
    }
    Component {
        name: "QtExclusiveGroup"
        prototype: "QObject"
        exports: ["ExclusiveGroup 1.0"]
        Property { name: "current"; type: "QObject"; isPointer: true }
        Method {
            name: "bindCheckable"
            Parameter { name: "o"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "unbindCheckable"
            Parameter { name: "o"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "QtMenu"
        defaultProperty: "items"
        prototype: "QtMenuText"
        exports: ["MenuPrivate 1.0"]
        Property { name: "items"; type: "QtMenuBase"; isList: true; isReadonly: true }
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "__popupVisible"; type: "bool"; isReadonly: true }
        Property { name: "__contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__minimumWidth"; type: "int" }
        Property { name: "__font"; type: "QFont" }
        Signal {
            name: "modelChanged"
            Parameter { name: "newModel"; type: "QVariant" }
        }
        Signal { name: "__menuClosed" }
        Signal { name: "popupVisibleChanged" }
        Method { name: "__closeMenu" }
        Method { name: "__dismissMenu" }
        Method { name: "popup" }
        Method {
            name: "addItem"
            type: "QtMenuItem*"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "clear" }
        Method {
            name: "__popup"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "atActionIndex"; type: "int" }
        }
        Method {
            name: "__popup"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "__modelTextAt"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "__modelCount"; type: "int" }
        Method { name: "__hasNativeModel"; type: "bool" }
    }
    Component {
        name: "QtMenuBar"
        defaultProperty: "menus"
        prototype: "QObject"
        exports: ["MenuBarPrivate 1.0"]
        Property { name: "menus"; type: "QtMenu"; isList: true; isReadonly: true }
        Property { name: "__contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__parentWindow"; type: "QQuickWindow"; isPointer: true }
        Property { name: "__isNative"; type: "bool"; isReadonly: true }
        Signal { name: "contentItemChanged" }
    }
    Component {
        name: "QtMenuBase"
        prototype: "QObject"
        exports: ["MenuBase 1.0"]
        Property { name: "visible"; type: "bool" }
        Property { name: "__parentMenu"; type: "QtMenu"; isReadonly: true; isPointer: true }
        Property { name: "__isNative"; type: "bool"; isReadonly: true }
        Property { name: "__visualItem"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        name: "QtMenuItem"
        prototype: "QtMenuText"
        exports: ["MenuItem 1.0"]
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QtExclusiveGroup"; isPointer: true }
        Property { name: "shortcut"; type: "string" }
        Property { name: "action"; type: "QtAction"; isPointer: true }
        Signal { name: "triggered" }
        Signal {
            name: "toggled"
            Parameter { name: "checked"; type: "bool" }
        }
        Method { name: "trigger" }
    }
    Component {
        name: "QtMenuSeparator"
        prototype: "QtMenuBase"
        exports: ["MenuSeparator 1.0"]
    }
    Component {
        name: "QtMenuText"
        prototype: "QtMenuBase"
        Property { name: "text"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__icon"; type: "QVariant"; isReadonly: true }
    }
}
